#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <stdio.h>
#include <cuda.h>
#include <stdlib.h>

#define N 30 // Array size for any number


_global_ void rankSort(int* d_input, int* d_output, int n) {
    
    //find the corresponding array index of the thread
    int index = blockIdx.x * blockDim.x + threadIdx.x;

    //check if thread is inside the bounds of array
    if (index >= n)
        return;

	//initialize rank to 0
    int rank = 0;

    //store the value of array cell
    int cell = d_input[index];

    //increment rank for each element less than or equal to d_input[index], and with index i < index
    for (int i = 0; i < index; i++) {
        if (d_input[i] <= cell)
            rank++;
    }

    //increment rank for each element less than d_input[index], and with index i > index
    for (int i = index + 1; i < n; i++) {
        if (d_input[i] < cell)
            rank++;
    }

    //store d_input[index] in the correct index in the output array
    d_output[rank] = cell;

}

void printNumbers(int* array, int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", array[i]);
    }
}

void generateRandom(int* array, int n, int range) {
    for (int i = 0; i < n; i++) {
        array[i] = rand() % range;
    }
}

int main() {
    int h_input[N];
    int h_output[N];
    int* d_input, * d_output;

    generateRandom(h_input, N, N);
    printf("The Original Sort : ");
    printNumbers(h_input, N);
    printf("\n");

    cudaMalloc((void**)&d_input, N * sizeof(int));
    cudaMalloc((void**)&d_output, N * sizeof(int));

    cudaMemcpy(d_input, h_input, N * sizeof(int), cudaMemcpyHostToDevice);
    //
    int n_Blocks = (N + 1023) / 1024;
    //
    int n_Threads = 1024;

    rankSort << <n_Blocks, n_Threads >> > (d_input, d_output, N);
    //
    cudaDeviceSynchronize();
    //
    cudaMemcpy(h_output, d_output, N * sizeof(int), cudaMemcpyDeviceToHost);
    printf("the sort after using rankSort: ");
    printNumbers(h_output, N);

    printf("\nDone!!\n");
    cudaFree(d_input);
    cudaFree(d_output);
    //printf("%d",rand());

    return 0;
}